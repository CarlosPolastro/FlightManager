@using FlightManager.Domain.DTOS;
@using Microsoft.AspNetCore.Mvc.Localization;
@{
    ViewData["Title"] = "Flight Manager";
}
@inject IHtmlLocalizer<Startup> SharedLocalizer
@model FlightDTO


@section scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script src="~/js/notEqualValidation.js"></script>
    <script>
        //Keeps information about Max Fuel Used for each aircraft
        var aircraftTypes = @Html.Raw(ViewBag.AircraftTypesJson);

        aircraftTypes.forEach(aircraft => {
            console.log(`ID: ${aircraft.ID}, Description: ${aircraft.Description}`);
        });
 
        // Function to initialize scripts and validation
        function reinitializeUnobtrusiveValidation() {
            // Remove old validation bindings
            var $form = $("#flightForm");
            $form.removeData('validator').removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse($form); // Re-parse unobtrusive validation
        }

        // Show loader during AJAX requests
        $(document).ajaxStart(function () {
            $("#loadingSpinner").show();
        }).ajaxStop(function () {
            $("#loadingSpinner").hide();
        });

        function calculateFlightInfo() {
            console.log('Called calculateFlightInfo');

            var departure = $('#DepartureAirportID').val();
            var destination = $('#DestinationAirportID').val();
            var aircraft = $('#AircraftTypeID').val();
            if (!departure || !destination || !aircraft) {
                return;
            }

            var $submitButton = $('#flightForm').find('input[type="submit"]');
            $submitButton.prop('disabled', true);

            var formData = $('#flightForm').serialize();

            $.ajax({
                url: '@Url.Action("CalculateFlightInfo", "Flight")',
                type: 'PUT',
                data: formData,
                headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                success: function (response) {
                    $("#viewContent").html(response);
                    reinitializeUnobtrusiveValidation(); // Re-initialize after DOM update
                },
                error: function (xhr, status, error) {
                    handleAjaxError(xhr);
                },
                complete: function () {
                    $submitButton.prop('disabled', false);
                }
            });
        }

        function addValidationSummaryError(message) {
            var $summary = $("[data-valmsg-summary=true]");
            var $ul = $summary.find("ul");

            $summary.removeClass("validation-summary-valid").addClass("validation-summary-errors");
            $ul.empty();
            $ul.append("<li>" + message + "</li>");
        }

        function handleAjaxError(xhr) {
            if (xhr.responseJSON && xhr.responseJSON.errors) {
                xhr.responseJSON.errors.forEach(function (err) {
                    addValidationSummaryError(err);
                });
            } else {
                toastr.error("Error: " + xhr.statusText);
            }
        }

        function deleteFlight(id) {
            if (!confirm('Are you sure you want to delete this flight?')) return;
            $.ajax({
                url: '@Url.Action("Delete", "Flight")',
                type: 'POST',
                data: { id: id },
                headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
                success: function (response) {
                    $('.page-content').html($(response).find('.page-content').html());
                    reinitializeUnobtrusiveValidation(); // Re-initialize after DOM update
                },
                error: function (xhr, status, error) {
                    handleAjaxError(xhr);
                }
            });
        }

        function updateAircraftInfo(aircraftId) {
            var aircraft = aircraftTypes.find(a => a.ID == aircraftId);
            console.log('aircraft:' + aircraft);
            if (!aircraft) {
                $('#aircraftInfoContent').html('');
                return;
            }

            var html = `
                    <div>
                        <p><strong>Max Fuel Usage per Km:</strong> ${aircraft.MaxFuelUsageLiterPerKm} Liters/Km</p>
                        <p><strong>Max Fuel Usage per Hour:</strong> ${aircraft.MaxFuelUsageLiterPerHour} Liters/Hour</p>
                        <p><strong>Max Fuel Takeoff Effort:</strong> ${aircraft.MaxFuelTakeoffEffortLiter} Liters</p>
                    </div>`;
            $('#aircraftInfoContent').html(html);
        }

        $(document).ready(function () {
            // One-time delegated submit handler
            $(document).on('submit', '#flightForm', function (e) {
                e.preventDefault();
                const $form = $(this);
                if (!$form.valid()) return;

                const $submitButton = $form.find('input[type="submit"]');
                $submitButton.prop('disabled', true);

                const formData = $form.serialize();
                const actionUrl = $form.attr('action');

                $.ajax({
                    url: actionUrl,
                    type: 'POST',
                    data: formData,
                    headers: { "RequestVerificationToken": $form.find('input[name="__RequestVerificationToken"]').val() },
                    success: function (response) {
                        $('.page-content').html($(response).find('.page-content').html());
                        reinitializeUnobtrusiveValidation(); // Re-parse validation on the new form
                    },
                    error: handleAjaxError,
                    complete: function () {
                        $submitButton.prop('disabled', false);
                    }
                });
            });

            // Flight field change handler
            $(document).on('change', '#DepartureAirportID, #DestinationAirportID, #AircraftTypeID', function () {
                if ($(this).valid()) {
                    calculateFlightInfo();
                }
            });

            // Aircraft info update
            $(document).on('change', '#AircraftTypeID', function () {
                updateAircraftInfo($(this).val());
            });

            reinitializeUnobtrusiveValidation();
        });
    </script>
}

<div class="page-content mt-4">
    @await Html.PartialAsync("Loader")
    @await Html.PartialAsync("MessageDialog")
    <div class="text-center">
        <h4>@SharedLocalizer["FlightInformation"]</h4>
    </div>
    @using (Html.BeginForm(Model.ID == 0 ? "Insert" : "Edit", "Flight", FormMethod.Post, new { id = "flightForm" }))
    {
        @Html.AntiForgeryToken()

        @Html.HiddenFor(model => model.ID)

        <fieldset>
            <div class="container mt-4 mb-4">
                <div class="row">
                    <div class="col-12">
                        @*@Html.ValidationSummary(false, "", new { @class = "text-danger" })*@
                    </div>
                </div>
                @if (Model.ID > 0)
                {
                    <div class="row">
                        <div class="col-2">
                            @SharedLocalizer["Flight"] #
                        </div>
                        <div class="col-10">
                            @Model.ID
                        </div>
                    </div>
                }
                <div class="row">
                    <div class="col-2">
                        <span>@SharedLocalizer["DepartureAirport"]</span>
                    </div>
                    <div class="col-10">
                        @Html.DropDownListFor(model => model.DepartureAirportID,
                                    new SelectList(ViewBag.Airports, "ID", "Name", Model.DepartureAirportID),
                                    @SharedLocalizer["DropDownSelect"].Value, new { @class = "site-control input-sm" })
                        @Html.ValidationMessageFor(model => model.DepartureAirportID, "", new { @class = "text-danger d-block" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-2">
                        <span>@SharedLocalizer["DestinationAirport"]</span>
                    </div>
                    <div class="col-10">
                        @Html.DropDownListFor(model => model.DestinationAirportID,
                                    new SelectList(ViewBag.Airports, "ID", "Name", Model.DestinationAirportID),
                                    @SharedLocalizer["DropDownSelect"].Value, new { @class = "site-control input-sm" })
                        @Html.ValidationMessageFor(model => model.DestinationAirportID, "", new { @class = "text-danger d-block" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-2">
                        <span>@SharedLocalizer["AircraftType"]</span>
                    </div>
                    <div class="col-10">
                        @Html.DropDownListFor(model => model.AircraftTypeID,
                                new SelectList(ViewBag.AircraftTypes, "ID", "Description", Model.AircraftTypeID),
                                @SharedLocalizer["DropDownSelect"].Value, new { @class = "site-control input-sm" })
                        @Html.ValidationMessageFor(model => model.AircraftTypeID, "", new { @class = "text-danger d-block" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-2"></div>
                    <div class="col-10">
                        <div id="aircraftInfoContent">
                            <!-- conteúdo será preenchido por JavaScript -->
                        </div>
                    </div>
                </div>
                <div id="viewContent">
                    @await Html.PartialAsync("_FlightCalculatePartial", Model)
                </div>
                <div class="row">
                    <div class="col-12">
                        <input type="submit" class="btn btn-primary mt-3" value="@(Model.ID == 0 ? @SharedLocalizer["ButtonAddFlight"].Value : @SharedLocalizer["ButtonUpdateFlight"].Value)" />
                        @Html.ActionLink(@SharedLocalizer["ButtonClear"].Value, "Index", "Flight", null, new { @class = "btn btn-primary mt-3" })
                    </div>
                </div>
            </div>
        </fieldset>
    }

    <hr class="solid" />
    <div class="text-center">
        <h4>@SharedLocalizer["Flights"]</h4>
    </div>
    <table class="table table-sm table-striped">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">@SharedLocalizer["HeaderDeparture"]</th>
                <th scope="col">@SharedLocalizer["HeaderDestination"]</th>
                <th scope="col">@SharedLocalizer["HeaderAircraftType"]</th>
                <th scope="col" class="text-center">@SharedLocalizer["HeaderDistanceKm"]</th>
                <th scope="col" class="text-center">@SharedLocalizer["HeaderFuelL"]</th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>

            @if (ViewBag.Flights == null || ViewBag.Flights.Count == 0)
            {
                <tr><td colspan="7" class="text-center"><span>@SharedLocalizer["MessageNoFlightsFound"]</span></td></tr>
            }
            @foreach (FlightDTO item in ViewBag.Flights)
            {
                <tr>
                    <th scope="row">@item.ID</th>
                    <td>@item.DepartureAirport</td>
                    <td>@item.DestinationAirport</td>
                    <td>@item.AircraftTypeDescription</td>
                    <td class="text-center">@item.DistanceKm</td>
                    <td class="text-center">@item.TotalFuelLiter</td>
                    <td>
                        @Html.ActionLink(@SharedLocalizer["ButtonEdit"].Value, "Detail", "Flight", new { id = item.ID }, new { @class = "btn-sm btn-primary" })
                    </td>
                    <td>
                        @Html.ActionLink(@SharedLocalizer["ButtonDelete"].Value, null, null, null, new { @class = "btn-sm btn-danger delete-flight", data_id = item.ID, onclick = "deleteFlight(" + item.ID + "); return false;" })
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @if (ViewBag.TotalPages > 1)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mt-3">
                @for (int i = 1; i <= ViewBag.TotalPages; i++)
                {
                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { page = i, pageSize = ViewBag.PageSize })">@i</a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>
